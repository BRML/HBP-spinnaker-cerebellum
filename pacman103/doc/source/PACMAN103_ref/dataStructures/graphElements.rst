
Representation of the Task
--------------------------

Vertices and Edges
++++++++++++++++++

Nodes in the problem domain (representing sites of computation or data storage)
are represented internally in PACMAN103 as *vertices* of a generic directed graph.

Communication between nodes during simulation is represented internally as *edges*
of the directed graph.

For example, in the spiking neural domain, a vertex represents a group of neurons
while a directed edge represent a projection between neuronal groups: an axon
bundle.

.. _Vertex:

Vertex
======

=================== ===================
  Field                   Value       
=================== ===================
  Defined in           lib/lib_graph  
  Class name           Vertex
  Generated by         Front End
  Used by              Partitioner
=================== ===================

An instance of the *Vertex* class has the following child elements:

=================== ====================== ========================= 
  Element                 Type              Notes
=================== ====================== ========================= 
  model              Model class           e.g. LIF neuron, heat element, etc.
  atoms              Int                   Number of elements in the group
  parameters         List of paramaters    (Optional) Used in mapping(?)
  constraints        List of constraints   (Optional) Used in partitioning and mapping
  label              String                (Optional) Textual description of this vertex
  subvertex          List (type subvertex) List of sub-vertices is constructed during partitioning
  in_edges           List (type edge)      List of directed edges arriving at this vertex
  out_edges          List (type edge)      List of directed edges leaving this vertex
=================== ====================== ========================= 

.. _Edge:

Edge
====

=================== ===================
  Field                   Value        
=================== ===================
  Defined in           lib/lib_graph    
  Class name           Edge
  Generated by         Front End
  Used by              Partitioner
=================== ===================

An instance of the *Edge* class has the following child elements:

=================== ====================== ========================= 
  Element                 Type              Notes
=================== ====================== ========================= 
  model              Model class           e.g. All-to-all connector, One-to-one connector
  prevertex          Vertex instance       Ref. to the vertex that sources this directed edge
  postvertex         Vertex instance       Ref. to the vertex that sinks this directed edge
  parameters         List of paramaters    (Optional) Used in mapping(?)
  constraints        List of constraints   (Optional) Used in partitioning and mapping
  subedges           List (type subedge)   List of decomposed edges, created during partitioning
=================== ====================== ========================= 


Subvertices and Subedges
++++++++++++++++++++++++

During the partition process in PACMAN103, vertices from the problem domain are
divided into one or more sub-groups so that a single sub-group can be allocated
to a single SpiNNaker core without demanding more resources than that core can
offer. These sub-groups are called *subvertices*.

At the same time, the set of edges is similarly partitioned to follow the new 
structure of subvertices. These new edges are referred to as *subedges* to regularise
the nomenclature.

.. _Subvertex:

Subvertex
=========

=================== ===================
  Field                   Value       
=================== ===================
  Defined in           lib/lib_graph  
  Class name           Subvertex
  Generated by         Front End
  Used by              Partitioner
=================== ===================

An instance of the *Subvertex* class has the following child elements:

=================== ======================= ========================= 
  Element                 Type              Notes
=================== ======================= ========================= 
  vertex             Ref to vertex instance Link back to parent vertex
  lo_atom            Int                    Index into parent group where this sub-group begins
  hi_atom            Int                    Index into parent group where this sub-group ends
  in_subedges        List (type subedge)    List of directed edges arriving at this subvertex
  out_subedges       List (type subedge)    List of directed edges leaving this subvertex
  placement          Ref to Placement       Placement created by mapper, associating this
                     instance               subvertex with its allocated processor
=================== ======================= ========================= 

Note that the subvertex has no model, parameter or constraint fields as these
are derived from the parent vertex and are access through the parent. The lo_atom
and hi_atom fields allow this subvertex to select a sub-range of the entire
population of elements in the parent vertex.

.. _Subedge:

Subedge
=======

A subedge is an edge connecting two subvertices. Subedges are generated from
a parent edge by the *partitioning* process in PACMAN103 and used by the
*routing* process.

=================== ===================
  Field                   Value        
=================== ===================
  Defined in           lib/lib_graph    
  Class name           Subedge
  Generated by         Front End
  Used by              Partitioner
=================== ===================

An instance of the *Subedge* class has the following child elements:

=================== ====================== ========================= 
  Element                 Type              Notes
=================== ====================== ========================= 
  edge              Ref. to edge instance  Reference to the parent edge
  presubvertex      Subvertex instance     Ref. to the subvertex that sources this directed edge
  postsubvertex     Subvertex instance     Ref. to the subvertex that sinks this directed edge
=================== ====================== ========================= 

Again, properties of the subedge are not stored with each subedge instance
since they are common to all subedges derived from the same parent edge. 


